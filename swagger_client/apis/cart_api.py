# coding: utf-8

"""
    ECommerce Checkout Flow API

    Registration, Address Information, Delivery Options, Payment, Confirmation

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CartApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def checkout_available_countries_get_using_get(self, **kwargs):
        """
        Get available billing and shipping countries
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_available_countries_get_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AvailableCountries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_available_countries_get_using_get_with_http_info(**kwargs)
        else:
            (data) = self.checkout_available_countries_get_using_get_with_http_info(**kwargs)
            return data

    def checkout_available_countries_get_using_get_with_http_info(self, **kwargs):
        """
        Get available billing and shipping countries
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_available_countries_get_using_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AvailableCountries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_available_countries_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/checkout/availableCountries'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AvailableCountries',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def checkout_checkout_id_available_payment_methods_get_using_get(self, checkout_id, **kwargs):
        """
        Get available payment methods
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_available_payment_methods_get_using_get(checkout_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :return: AvailablePaymentMethodList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_checkout_id_available_payment_methods_get_using_get_with_http_info(checkout_id, **kwargs)
        else:
            (data) = self.checkout_checkout_id_available_payment_methods_get_using_get_with_http_info(checkout_id, **kwargs)
            return data

    def checkout_checkout_id_available_payment_methods_get_using_get_with_http_info(self, checkout_id, **kwargs):
        """
        Get available payment methods
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_available_payment_methods_get_using_get_with_http_info(checkout_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :return: AvailablePaymentMethodList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_checkout_id_available_payment_methods_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `checkout_checkout_id_available_payment_methods_get_using_get`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}/availablePaymentMethods'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AvailablePaymentMethodList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def checkout_checkout_id_available_shipping_methods_get_using_get(self, checkout_id, **kwargs):
        """
        Get shipping info
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_available_shipping_methods_get_using_get(checkout_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :return: AvailableShippingMethodList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_checkout_id_available_shipping_methods_get_using_get_with_http_info(checkout_id, **kwargs)
        else:
            (data) = self.checkout_checkout_id_available_shipping_methods_get_using_get_with_http_info(checkout_id, **kwargs)
            return data

    def checkout_checkout_id_available_shipping_methods_get_using_get_with_http_info(self, checkout_id, **kwargs):
        """
        Get shipping info
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_available_shipping_methods_get_using_get_with_http_info(checkout_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :return: AvailableShippingMethodList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_checkout_id_available_shipping_methods_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `checkout_checkout_id_available_shipping_methods_get_using_get`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}/availableShippingMethods'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AvailableShippingMethodList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def checkout_checkout_id_billing_address_put_using_put(self, checkout_id, body, **kwargs):
        """
        Update the billing address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_billing_address_put_using_put(checkout_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param Address body: Cart object that needs to be updated (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_checkout_id_billing_address_put_using_put_with_http_info(checkout_id, body, **kwargs)
        else:
            (data) = self.checkout_checkout_id_billing_address_put_using_put_with_http_info(checkout_id, body, **kwargs)
            return data

    def checkout_checkout_id_billing_address_put_using_put_with_http_info(self, checkout_id, body, **kwargs):
        """
        Update the billing address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_billing_address_put_using_put_with_http_info(checkout_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param Address body: Cart object that needs to be updated (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_checkout_id_billing_address_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `checkout_checkout_id_billing_address_put_using_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `checkout_checkout_id_billing_address_put_using_put`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}/billingAddress'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Checkout',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def checkout_checkout_id_customer_attributes_put_using_put(self, checkout_id, customer_attributes, **kwargs):
        """
        Set or update customer attributes
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_customer_attributes_put_using_put(checkout_id, customer_attributes, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param CustomerAttributes customer_attributes: Customer attributes (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_checkout_id_customer_attributes_put_using_put_with_http_info(checkout_id, customer_attributes, **kwargs)
        else:
            (data) = self.checkout_checkout_id_customer_attributes_put_using_put_with_http_info(checkout_id, customer_attributes, **kwargs)
            return data

    def checkout_checkout_id_customer_attributes_put_using_put_with_http_info(self, checkout_id, customer_attributes, **kwargs):
        """
        Set or update customer attributes
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_customer_attributes_put_using_put_with_http_info(checkout_id, customer_attributes, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param CustomerAttributes customer_attributes: Customer attributes (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id', 'customer_attributes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_checkout_id_customer_attributes_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `checkout_checkout_id_customer_attributes_put_using_put`")
        # verify the required parameter 'customer_attributes' is set
        if ('customer_attributes' not in params) or (params['customer_attributes'] is None):
            raise ValueError("Missing the required parameter `customer_attributes` when calling `checkout_checkout_id_customer_attributes_put_using_put`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}/customerAttributes'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customer_attributes' in params:
            body_params = params['customer_attributes']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Checkout',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def checkout_checkout_id_get_using_get(self, checkout_id, **kwargs):
        """
        Get an existing cart
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_get_using_get(checkout_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_checkout_id_get_using_get_with_http_info(checkout_id, **kwargs)
        else:
            (data) = self.checkout_checkout_id_get_using_get_with_http_info(checkout_id, **kwargs)
            return data

    def checkout_checkout_id_get_using_get_with_http_info(self, checkout_id, **kwargs):
        """
        Get an existing cart
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_get_using_get_with_http_info(checkout_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_checkout_id_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `checkout_checkout_id_get_using_get`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Checkout',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def checkout_checkout_id_items_item_id_delete_using_delete(self, checkout_id, item_id, **kwargs):
        """
        Delete an item from the shopping cart
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_items_item_id_delete_using_delete(checkout_id, item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param str item_id: Item Id (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_checkout_id_items_item_id_delete_using_delete_with_http_info(checkout_id, item_id, **kwargs)
        else:
            (data) = self.checkout_checkout_id_items_item_id_delete_using_delete_with_http_info(checkout_id, item_id, **kwargs)
            return data

    def checkout_checkout_id_items_item_id_delete_using_delete_with_http_info(self, checkout_id, item_id, **kwargs):
        """
        Delete an item from the shopping cart
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_items_item_id_delete_using_delete_with_http_info(checkout_id, item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param str item_id: Item Id (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id', 'item_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_checkout_id_items_item_id_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `checkout_checkout_id_items_item_id_delete_using_delete`")
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params) or (params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `checkout_checkout_id_items_item_id_delete_using_delete`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}/items/{itemId}'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Checkout',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def checkout_checkout_id_items_item_id_put_using_put(self, checkout_id, item_id, item, **kwargs):
        """
        Update an existing item from the shopping cart
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_items_item_id_put_using_put(checkout_id, item_id, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param str item_id: Item Id (required)
        :param Product item: Item (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_checkout_id_items_item_id_put_using_put_with_http_info(checkout_id, item_id, item, **kwargs)
        else:
            (data) = self.checkout_checkout_id_items_item_id_put_using_put_with_http_info(checkout_id, item_id, item, **kwargs)
            return data

    def checkout_checkout_id_items_item_id_put_using_put_with_http_info(self, checkout_id, item_id, item, **kwargs):
        """
        Update an existing item from the shopping cart
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_items_item_id_put_using_put_with_http_info(checkout_id, item_id, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param str item_id: Item Id (required)
        :param Product item: Item (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id', 'item_id', 'item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_checkout_id_items_item_id_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `checkout_checkout_id_items_item_id_put_using_put`")
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params) or (params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `checkout_checkout_id_items_item_id_put_using_put`")
        # verify the required parameter 'item' is set
        if ('item' not in params) or (params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `checkout_checkout_id_items_item_id_put_using_put`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}/items/{itemId}'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Checkout',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def checkout_checkout_id_pay_post_using_post(self, checkout_id, body, **kwargs):
        """
        Pay the cart total
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_pay_post_using_post(checkout_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param PaymentMethod body: Payment method (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_checkout_id_pay_post_using_post_with_http_info(checkout_id, body, **kwargs)
        else:
            (data) = self.checkout_checkout_id_pay_post_using_post_with_http_info(checkout_id, body, **kwargs)
            return data

    def checkout_checkout_id_pay_post_using_post_with_http_info(self, checkout_id, body, **kwargs):
        """
        Pay the cart total
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_pay_post_using_post_with_http_info(checkout_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param PaymentMethod body: Payment method (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_checkout_id_pay_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `checkout_checkout_id_pay_post_using_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `checkout_checkout_id_pay_post_using_post`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}/pay'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def checkout_checkout_id_shipping_address_put_using_put(self, checkout_id, body, **kwargs):
        """
        Update the shipping address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_shipping_address_put_using_put(checkout_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param Address body: Shipping address (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_checkout_id_shipping_address_put_using_put_with_http_info(checkout_id, body, **kwargs)
        else:
            (data) = self.checkout_checkout_id_shipping_address_put_using_put_with_http_info(checkout_id, body, **kwargs)
            return data

    def checkout_checkout_id_shipping_address_put_using_put_with_http_info(self, checkout_id, body, **kwargs):
        """
        Update the shipping address
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_shipping_address_put_using_put_with_http_info(checkout_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param Address body: Shipping address (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_checkout_id_shipping_address_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `checkout_checkout_id_shipping_address_put_using_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `checkout_checkout_id_shipping_address_put_using_put`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}/shippingAddress'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Checkout',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def checkout_checkout_id_shipping_method_put_using_put(self, checkout_id, shipping_method, **kwargs):
        """
        Set or update the shipping method
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_shipping_method_put_using_put(checkout_id, shipping_method, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param str shipping_method: Shipping method (0: Express, 1: Standard, 2: Economy) (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.checkout_checkout_id_shipping_method_put_using_put_with_http_info(checkout_id, shipping_method, **kwargs)
        else:
            (data) = self.checkout_checkout_id_shipping_method_put_using_put_with_http_info(checkout_id, shipping_method, **kwargs)
            return data

    def checkout_checkout_id_shipping_method_put_using_put_with_http_info(self, checkout_id, shipping_method, **kwargs):
        """
        Set or update the shipping method
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.checkout_checkout_id_shipping_method_put_using_put_with_http_info(checkout_id, shipping_method, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param str shipping_method: Shipping method (0: Express, 1: Standard, 2: Economy) (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id', 'shipping_method']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkout_checkout_id_shipping_method_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `checkout_checkout_id_shipping_method_put_using_put`")
        # verify the required parameter 'shipping_method' is set
        if ('shipping_method' not in params) or (params['shipping_method'] is None):
            raise ValueError("Missing the required parameter `shipping_method` when calling `checkout_checkout_id_shipping_method_put_using_put`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}/shippingMethod'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']

        query_params = {}
        if 'shipping_method' in params:
            query_params['shippingMethod'] = params['shipping_method']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Checkout',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def create_cart_using_post(self, cart, **kwargs):
        """
        Create a possibly empty shopping cart
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_cart_using_post(cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cart cart: Includes billing and products info (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_cart_using_post_with_http_info(cart, **kwargs)
        else:
            (data) = self.create_cart_using_post_with_http_info(cart, **kwargs)
            return data

    def create_cart_using_post_with_http_info(self, cart, **kwargs):
        """
        Create a possibly empty shopping cart
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_cart_using_post_with_http_info(cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cart cart: Includes billing and products info (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cart_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart' is set
        if ('cart' not in params) or (params['cart'] is None):
            raise ValueError("Missing the required parameter `cart` when calling `create_cart_using_post`")


        collection_formats = {}

        resource_path = '/checkout'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cart' in params:
            body_params = params['cart']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Checkout',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def create_item_using_post(self, checkout_id, item, **kwargs):
        """
        Add a new item to the shopping cart
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_item_using_post(checkout_id, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param Product item: Item to be added to the cart (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_item_using_post_with_http_info(checkout_id, item, **kwargs)
        else:
            (data) = self.create_item_using_post_with_http_info(checkout_id, item, **kwargs)
            return data

    def create_item_using_post_with_http_info(self, checkout_id, item, **kwargs):
        """
        Add a new item to the shopping cart
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_item_using_post_with_http_info(checkout_id, item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str checkout_id: Checkout Id (required)
        :param Product item: Item to be added to the cart (required)
        :return: Checkout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_id', 'item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_item_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_id' is set
        if ('checkout_id' not in params) or (params['checkout_id'] is None):
            raise ValueError("Missing the required parameter `checkout_id` when calling `create_item_using_post`")
        # verify the required parameter 'item' is set
        if ('item' not in params) or (params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `create_item_using_post`")


        collection_formats = {}

        resource_path = '/checkout/{checkoutId}/items'.replace('{format}', 'json')
        path_params = {}
        if 'checkout_id' in params:
            path_params['checkoutId'] = params['checkout_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Checkout',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)
