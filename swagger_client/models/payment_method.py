# coding: utf-8

"""
    ECommerce Checkout Flow API

    Registration, Address Information, Delivery Options, Payment, Confirmation

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PaymentMethod(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, card_ccv=None, card_exp_month=None, card_exp_year=None, card_number=None, code=None):
        """
        PaymentMethod - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'card_ccv': 'str',
            'card_exp_month': 'str',
            'card_exp_year': 'str',
            'card_number': 'str',
            'code': 'str'
        }

        self.attribute_map = {
            'card_ccv': 'card_ccv',
            'card_exp_month': 'card_exp_month',
            'card_exp_year': 'card_exp_year',
            'card_number': 'card_number',
            'code': 'code'
        }

        self._card_ccv = card_ccv
        self._card_exp_month = card_exp_month
        self._card_exp_year = card_exp_year
        self._card_number = card_number
        self._code = code


    @property
    def card_ccv(self):
        """
        Gets the card_ccv of this PaymentMethod.


        :return: The card_ccv of this PaymentMethod.
        :rtype: str
        """
        return self._card_ccv

    @card_ccv.setter
    def card_ccv(self, card_ccv):
        """
        Sets the card_ccv of this PaymentMethod.


        :param card_ccv: The card_ccv of this PaymentMethod.
        :type: str
        """

        self._card_ccv = card_ccv

    @property
    def card_exp_month(self):
        """
        Gets the card_exp_month of this PaymentMethod.


        :return: The card_exp_month of this PaymentMethod.
        :rtype: str
        """
        return self._card_exp_month

    @card_exp_month.setter
    def card_exp_month(self, card_exp_month):
        """
        Sets the card_exp_month of this PaymentMethod.


        :param card_exp_month: The card_exp_month of this PaymentMethod.
        :type: str
        """

        self._card_exp_month = card_exp_month

    @property
    def card_exp_year(self):
        """
        Gets the card_exp_year of this PaymentMethod.


        :return: The card_exp_year of this PaymentMethod.
        :rtype: str
        """
        return self._card_exp_year

    @card_exp_year.setter
    def card_exp_year(self, card_exp_year):
        """
        Sets the card_exp_year of this PaymentMethod.


        :param card_exp_year: The card_exp_year of this PaymentMethod.
        :type: str
        """

        self._card_exp_year = card_exp_year

    @property
    def card_number(self):
        """
        Gets the card_number of this PaymentMethod.


        :return: The card_number of this PaymentMethod.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """
        Sets the card_number of this PaymentMethod.


        :param card_number: The card_number of this PaymentMethod.
        :type: str
        """

        self._card_number = card_number

    @property
    def code(self):
        """
        Gets the code of this PaymentMethod.


        :return: The code of this PaymentMethod.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this PaymentMethod.


        :param code: The code of this PaymentMethod.
        :type: str
        """

        self._code = code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
