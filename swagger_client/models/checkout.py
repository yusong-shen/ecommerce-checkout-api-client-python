# coding: utf-8

"""
    ECommerce Checkout Flow API

    Registration, Address Information, Delivery Options, Payment, Confirmation

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Checkout(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, available_payment_methods=None, available_shipping_methods=None, cart=None, checkout_id=None, merchant_totals=None, totals=None):
        """
        Checkout - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'available_payment_methods': 'list[AvailablePaymentMethod]',
            'available_shipping_methods': 'list[AvailableShippingMethod]',
            'cart': 'Cart',
            'checkout_id': 'str',
            'merchant_totals': 'CheckoutTotals',
            'totals': 'CheckoutTotals'
        }

        self.attribute_map = {
            'available_payment_methods': 'available_payment_methods',
            'available_shipping_methods': 'available_shipping_methods',
            'cart': 'cart',
            'checkout_id': 'checkout_id',
            'merchant_totals': 'merchantTotals',
            'totals': 'totals'
        }

        self._available_payment_methods = available_payment_methods
        self._available_shipping_methods = available_shipping_methods
        self._cart = cart
        self._checkout_id = checkout_id
        self._merchant_totals = merchant_totals
        self._totals = totals


    @property
    def available_payment_methods(self):
        """
        Gets the available_payment_methods of this Checkout.


        :return: The available_payment_methods of this Checkout.
        :rtype: list[AvailablePaymentMethod]
        """
        return self._available_payment_methods

    @available_payment_methods.setter
    def available_payment_methods(self, available_payment_methods):
        """
        Sets the available_payment_methods of this Checkout.


        :param available_payment_methods: The available_payment_methods of this Checkout.
        :type: list[AvailablePaymentMethod]
        """

        self._available_payment_methods = available_payment_methods

    @property
    def available_shipping_methods(self):
        """
        Gets the available_shipping_methods of this Checkout.


        :return: The available_shipping_methods of this Checkout.
        :rtype: list[AvailableShippingMethod]
        """
        return self._available_shipping_methods

    @available_shipping_methods.setter
    def available_shipping_methods(self, available_shipping_methods):
        """
        Sets the available_shipping_methods of this Checkout.


        :param available_shipping_methods: The available_shipping_methods of this Checkout.
        :type: list[AvailableShippingMethod]
        """

        self._available_shipping_methods = available_shipping_methods

    @property
    def cart(self):
        """
        Gets the cart of this Checkout.


        :return: The cart of this Checkout.
        :rtype: Cart
        """
        return self._cart

    @cart.setter
    def cart(self, cart):
        """
        Sets the cart of this Checkout.


        :param cart: The cart of this Checkout.
        :type: Cart
        """

        self._cart = cart

    @property
    def checkout_id(self):
        """
        Gets the checkout_id of this Checkout.


        :return: The checkout_id of this Checkout.
        :rtype: str
        """
        return self._checkout_id

    @checkout_id.setter
    def checkout_id(self, checkout_id):
        """
        Sets the checkout_id of this Checkout.


        :param checkout_id: The checkout_id of this Checkout.
        :type: str
        """

        self._checkout_id = checkout_id

    @property
    def merchant_totals(self):
        """
        Gets the merchant_totals of this Checkout.


        :return: The merchant_totals of this Checkout.
        :rtype: CheckoutTotals
        """
        return self._merchant_totals

    @merchant_totals.setter
    def merchant_totals(self, merchant_totals):
        """
        Sets the merchant_totals of this Checkout.


        :param merchant_totals: The merchant_totals of this Checkout.
        :type: CheckoutTotals
        """

        self._merchant_totals = merchant_totals

    @property
    def totals(self):
        """
        Gets the totals of this Checkout.


        :return: The totals of this Checkout.
        :rtype: CheckoutTotals
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """
        Sets the totals of this Checkout.


        :param totals: The totals of this Checkout.
        :type: CheckoutTotals
        """

        self._totals = totals

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
