# coding: utf-8

"""
    ECommerce Checkout Flow API

    Registration, Address Information, Delivery Options, Payment, Confirmation

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Cart(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, billing_address=None, charge_insurance=None, customer_attributes=None, domestic_shipping_charge=None, merchant_currency=None, products=None, shipping_address=None, shipping_method=None):
        """
        Cart - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'billing_address': 'Address',
            'charge_insurance': 'bool',
            'customer_attributes': 'CustomerAttributes',
            'domestic_shipping_charge': 'str',
            'merchant_currency': 'str',
            'products': 'list[Product]',
            'shipping_address': 'Address',
            'shipping_method': 'str'
        }

        self.attribute_map = {
            'billing_address': 'billing_address',
            'charge_insurance': 'charge_insurance',
            'customer_attributes': 'customer_attributes',
            'domestic_shipping_charge': 'domestic_shipping_charge',
            'merchant_currency': 'merchant_currency',
            'products': 'products',
            'shipping_address': 'shipping_address',
            'shipping_method': 'shipping_method'
        }

        self._billing_address = billing_address
        self._charge_insurance = charge_insurance
        self._customer_attributes = customer_attributes
        self._domestic_shipping_charge = domestic_shipping_charge
        self._merchant_currency = merchant_currency
        self._products = products
        self._shipping_address = shipping_address
        self._shipping_method = shipping_method


    @property
    def billing_address(self):
        """
        Gets the billing_address of this Cart.


        :return: The billing_address of this Cart.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this Cart.


        :param billing_address: The billing_address of this Cart.
        :type: Address
        """

        self._billing_address = billing_address

    @property
    def charge_insurance(self):
        """
        Gets the charge_insurance of this Cart.


        :return: The charge_insurance of this Cart.
        :rtype: bool
        """
        return self._charge_insurance

    @charge_insurance.setter
    def charge_insurance(self, charge_insurance):
        """
        Sets the charge_insurance of this Cart.


        :param charge_insurance: The charge_insurance of this Cart.
        :type: bool
        """

        self._charge_insurance = charge_insurance

    @property
    def customer_attributes(self):
        """
        Gets the customer_attributes of this Cart.


        :return: The customer_attributes of this Cart.
        :rtype: CustomerAttributes
        """
        return self._customer_attributes

    @customer_attributes.setter
    def customer_attributes(self, customer_attributes):
        """
        Sets the customer_attributes of this Cart.


        :param customer_attributes: The customer_attributes of this Cart.
        :type: CustomerAttributes
        """

        self._customer_attributes = customer_attributes

    @property
    def domestic_shipping_charge(self):
        """
        Gets the domestic_shipping_charge of this Cart.


        :return: The domestic_shipping_charge of this Cart.
        :rtype: str
        """
        return self._domestic_shipping_charge

    @domestic_shipping_charge.setter
    def domestic_shipping_charge(self, domestic_shipping_charge):
        """
        Sets the domestic_shipping_charge of this Cart.


        :param domestic_shipping_charge: The domestic_shipping_charge of this Cart.
        :type: str
        """

        self._domestic_shipping_charge = domestic_shipping_charge

    @property
    def merchant_currency(self):
        """
        Gets the merchant_currency of this Cart.
        Merchant's currency code. Defaults to USD.

        :return: The merchant_currency of this Cart.
        :rtype: str
        """
        return self._merchant_currency

    @merchant_currency.setter
    def merchant_currency(self, merchant_currency):
        """
        Sets the merchant_currency of this Cart.
        Merchant's currency code. Defaults to USD.

        :param merchant_currency: The merchant_currency of this Cart.
        :type: str
        """

        self._merchant_currency = merchant_currency

    @property
    def products(self):
        """
        Gets the products of this Cart.


        :return: The products of this Cart.
        :rtype: list[Product]
        """
        return self._products

    @products.setter
    def products(self, products):
        """
        Sets the products of this Cart.


        :param products: The products of this Cart.
        :type: list[Product]
        """

        self._products = products

    @property
    def shipping_address(self):
        """
        Gets the shipping_address of this Cart.


        :return: The shipping_address of this Cart.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """
        Sets the shipping_address of this Cart.


        :param shipping_address: The shipping_address of this Cart.
        :type: Address
        """

        self._shipping_address = shipping_address

    @property
    def shipping_method(self):
        """
        Gets the shipping_method of this Cart.


        :return: The shipping_method of this Cart.
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """
        Sets the shipping_method of this Cart.


        :param shipping_method: The shipping_method of this Cart.
        :type: str
        """

        self._shipping_method = shipping_method

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
