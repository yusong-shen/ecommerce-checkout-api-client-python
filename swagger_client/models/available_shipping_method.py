# coding: utf-8

"""
    ECommerce Checkout Flow API

    Registration, Address Information, Delivery Options, Payment, Confirmation

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AvailableShippingMethod(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, amount=None, code=None, delivery_date=None, name=None):
        """
        AvailableShippingMethod - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'amount': 'str',
            'code': 'str',
            'delivery_date': 'str',
            'name': 'str'
        }

        self.attribute_map = {
            'amount': 'amount',
            'code': 'code',
            'delivery_date': 'delivery_date',
            'name': 'name'
        }

        self._amount = amount
        self._code = code
        self._delivery_date = delivery_date
        self._name = name


    @property
    def amount(self):
        """
        Gets the amount of this AvailableShippingMethod.


        :return: The amount of this AvailableShippingMethod.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this AvailableShippingMethod.


        :param amount: The amount of this AvailableShippingMethod.
        :type: str
        """

        self._amount = amount

    @property
    def code(self):
        """
        Gets the code of this AvailableShippingMethod.


        :return: The code of this AvailableShippingMethod.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this AvailableShippingMethod.


        :param code: The code of this AvailableShippingMethod.
        :type: str
        """

        self._code = code

    @property
    def delivery_date(self):
        """
        Gets the delivery_date of this AvailableShippingMethod.


        :return: The delivery_date of this AvailableShippingMethod.
        :rtype: str
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """
        Sets the delivery_date of this AvailableShippingMethod.


        :param delivery_date: The delivery_date of this AvailableShippingMethod.
        :type: str
        """

        self._delivery_date = delivery_date

    @property
    def name(self):
        """
        Gets the name of this AvailableShippingMethod.


        :return: The name of this AvailableShippingMethod.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AvailableShippingMethod.


        :param name: The name of this AvailableShippingMethod.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
