# coding: utf-8

"""
    ECommerce Checkout Flow API

    Registration, Address Information, Delivery Options, Payment, Confirmation

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Product(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, custom_1=None, custom_2=None, custom_3=None, id=None, name=None, price=None, quantity=None, shipping=None):
        """
        Product - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'custom_1': 'str',
            'custom_2': 'str',
            'custom_3': 'str',
            'id': 'str',
            'name': 'str',
            'price': 'str',
            'quantity': 'int',
            'shipping': 'str'
        }

        self.attribute_map = {
            'custom_1': 'custom_1',
            'custom_2': 'custom_2',
            'custom_3': 'custom_3',
            'id': 'id',
            'name': 'name',
            'price': 'price',
            'quantity': 'quantity',
            'shipping': 'shipping'
        }

        self._custom_1 = custom_1
        self._custom_2 = custom_2
        self._custom_3 = custom_3
        self._id = id
        self._name = name
        self._price = price
        self._quantity = quantity
        self._shipping = shipping


    @property
    def custom_1(self):
        """
        Gets the custom_1 of this Product.


        :return: The custom_1 of this Product.
        :rtype: str
        """
        return self._custom_1

    @custom_1.setter
    def custom_1(self, custom_1):
        """
        Sets the custom_1 of this Product.


        :param custom_1: The custom_1 of this Product.
        :type: str
        """

        self._custom_1 = custom_1

    @property
    def custom_2(self):
        """
        Gets the custom_2 of this Product.


        :return: The custom_2 of this Product.
        :rtype: str
        """
        return self._custom_2

    @custom_2.setter
    def custom_2(self, custom_2):
        """
        Sets the custom_2 of this Product.


        :param custom_2: The custom_2 of this Product.
        :type: str
        """

        self._custom_2 = custom_2

    @property
    def custom_3(self):
        """
        Gets the custom_3 of this Product.


        :return: The custom_3 of this Product.
        :rtype: str
        """
        return self._custom_3

    @custom_3.setter
    def custom_3(self, custom_3):
        """
        Sets the custom_3 of this Product.


        :param custom_3: The custom_3 of this Product.
        :type: str
        """

        self._custom_3 = custom_3

    @property
    def id(self):
        """
        Gets the id of this Product.


        :return: The id of this Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Product.


        :param id: The id of this Product.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Product.


        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Product.


        :param name: The name of this Product.
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """
        Gets the price of this Product.


        :return: The price of this Product.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this Product.


        :param price: The price of this Product.
        :type: str
        """

        self._price = price

    @property
    def quantity(self):
        """
        Gets the quantity of this Product.


        :return: The quantity of this Product.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this Product.


        :param quantity: The quantity of this Product.
        :type: int
        """

        self._quantity = quantity

    @property
    def shipping(self):
        """
        Gets the shipping of this Product.


        :return: The shipping of this Product.
        :rtype: str
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """
        Sets the shipping of this Product.


        :param shipping: The shipping of this Product.
        :type: str
        """

        self._shipping = shipping

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
