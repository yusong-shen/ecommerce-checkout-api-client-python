# coding: utf-8

"""
    ECommerce Checkout Flow API

    Registration, Address Information, Delivery Options, Payment, Confirmation

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Country(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, country_code=None, country_name=None, country_phone_code=None):
        """
        Country - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'country_code': 'str',
            'country_name': 'str',
            'country_phone_code': 'str'
        }

        self.attribute_map = {
            'country_code': 'country_code',
            'country_name': 'country_name',
            'country_phone_code': 'country_phone_code'
        }

        self._country_code = country_code
        self._country_name = country_name
        self._country_phone_code = country_phone_code


    @property
    def country_code(self):
        """
        Gets the country_code of this Country.


        :return: The country_code of this Country.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this Country.


        :param country_code: The country_code of this Country.
        :type: str
        """

        self._country_code = country_code

    @property
    def country_name(self):
        """
        Gets the country_name of this Country.


        :return: The country_name of this Country.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """
        Sets the country_name of this Country.


        :param country_name: The country_name of this Country.
        :type: str
        """

        self._country_name = country_name

    @property
    def country_phone_code(self):
        """
        Gets the country_phone_code of this Country.


        :return: The country_phone_code of this Country.
        :rtype: str
        """
        return self._country_phone_code

    @country_phone_code.setter
    def country_phone_code(self, country_phone_code):
        """
        Sets the country_phone_code of this Country.


        :param country_phone_code: The country_phone_code of this Country.
        :type: str
        """

        self._country_phone_code = country_phone_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
